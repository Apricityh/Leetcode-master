> Problem: [33. 搜索旋转排序数组](https://leetcode.cn/problems/search-in-rotated-sorted-array/description/)

[TOC]

# 思路

> 由于数组原来是递增排序，经过旋转后，变成两个递增有序的数组，仔细观察可以发现，第二段递增数组的值是严格小于nums[0]（题目说了数组的值各不相同），这样在找寻target时，通过先于nums[0]比较，决定是去哪一段数组中进行二分查找。
> 现在的问题转化为求解两段数组的转折点，改造标准的二分查找，将target改为nums[0]，但要注意边界点的处理，详情见代码change_bound()函数。

# Code

* []

```C++
class Solution {
public:
    int binary_search(vector<int>& nums, int s, int e, int target) {
        int low = s, high = e;
        while (low <= high) {
            int mid = (low + high) / 2;
            if (nums[mid] > target) {
                high = mid - 1;
            } else if (nums[mid] < target) {
                low = mid + 1;
            } else {
                return mid;
            }
        }
        return -1;
    }

    int change_bound(vector<int>& nums) {
        int low = 0, high = nums.size() - 1;
        while (low <= high) {
            int mid = (low + high) / 2;
            if (nums[mid] < nums[0]) {
                high = mid - 1;
            } else {
                low = mid + 1;
            }
        }
        return low;
    }
    int search(vector<int>& nums, int target) {
        int pos = change_bound(nums);
        if (nums[0] > target) {
            return binary_search(nums, pos, nums.size() - 1, target);
        } else {
            return binary_search(nums, 0, pos - 1, target);
        }
    }
};
```

