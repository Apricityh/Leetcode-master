### 解题思路

给定一个向量，将其中所有的零元素移动到末尾，同时保持非零元素的相对顺序不变。例如，给定 [0, 1, 0, 3, 12]，输出应该是 [1, 3, 12, 0, 0]。

解题思路是使用两个指针：慢指针和快指针。慢指针指向下一个非零元素应该放置的位置。快指针从左到右扫描向量。如果快指针遇到一个非零元素，就将它与慢指针位置的元素交换，然后同时增加两个指针。如果快指针遇到一个零元素，就跳过它，只增加自己。这样，所有的非零元素都被移动到了慢指针的左边，所有的零元素都被移动到了它的右边。最后，我们用零填充剩余的位置。

这个解法的时间复杂度是 O(n)，其中 n 是向量的长度。空间复杂度是 O(1)，因为我们只使用了常数额外空间。

### 代码

* cpp

```cpp
class Solution {
public:
    void moveZeroes(vector<int>& nums) {
        int slow=0;
        for(int fast=0;fast<nums.size();fast++){
            if(nums[fast]!=0){
                nums[slow++]=nums[fast];
            }
            else nums[slow]=nums[fast];
        }
        while(slow<nums.size()){
            nums[slow++]=0;
        }
    }
};
```

