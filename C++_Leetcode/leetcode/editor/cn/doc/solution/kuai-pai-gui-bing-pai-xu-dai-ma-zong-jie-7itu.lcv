- 本文面向面试同学总结常考的两种排序算法。

# 本文目录

[TOC]

# 思路

- 归并排序：每次二分数组进行排序，递归终止条件是数组长度 <= 1。
- 也就是维护 **左半边有序**，维护 **右半边有序**，然后通过 merge 将两边合并即可。
- 快速排序：每次随机选取一个数，作为标记，保证其在数组中有序，左边都小于我，右边都大于我。

# 复杂度

时间复杂度:

> $O(nlogn)$

# 题型

> Problem: [912. 排序数组](https://leetcode.cn/problems/sort-an-array/description/)

# 912 Code

- 归并排序

* []

```Python
class Solution:
    def sortArray(self, nums: List[int]) -> List[int]:
        def merge_sort(nums):
            if len(nums) <= 1:
                return nums
            mid = len(nums)//2
            left = merge_sort(nums[:mid])
            right = merge_sort(nums[mid:])
            return merge(left,right)
        
        def merge(left, right):
            i = 0
            j = 0
            res = []
            while i < len(left) and j < len(right):
                if left[i] < right[j]:
                    res.append(left[i])
                    i += 1
                else:
                    res.append(right[j])
                    j += 1
            res.extend(left[i:])
            res.extend(right[j:])
            return res
        return merge_sort(nums)
```

- 快排

* []

```Python
class Solution:
    def sortArray(self, nums: List[int]) -> List[int]:
        import random
        def quicksort(nums,left,right):
            flag = nums[random.randint(left,right)]
            i, j = left, right
            while i <= j:
                while nums[i] < flag:
                    i += 1
                while nums[j] > flag:
                    j -= 1
                if i <= j:
                    nums[i], nums[j] = nums[j], nums[i]
                    i += 1
                    j -= 1
            if i < right:
                quicksort(nums, i, right)
            if j > left:
                quicksort(nums, left, j)
        quicksort(nums, 0, len(nums)-1)
        return nums
```

