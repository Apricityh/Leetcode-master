### 解题思路

精选题解属实给力

### 代码

* cpp

```cpp
class Solution {
public:
    //看收藏的题解，有模板
    int numIslands(vector<vector<char>>& grid) {
        int count = 0;  //初始化岛屿数量
        for(int i = 0; i < grid.size(); i++)
        {
            for(int j = 0; j < grid[0].size(); j++)
            {
                if(grid[i][j] == '1')
                {
                    count++;    //每遍历到一个‘1’，岛屿数量加1
                    dfs(grid, i, j);
                }
            }
        }
        return count;
    }

    void dfs(vector<vector<char>>& grid, int i, int j)
    {
        //如果当前坐标不在网格中，直接返回
        if(!inArea(grid, i, j))
            return;
        // 如果这个格子不是岛屿，直接返回
        if(grid[i][j] != '1')
            return;
        // 将已遍历过的格子标为‘2’
        grid[i][j] = '2';
        //类似于二叉树的前序遍历，向上下左右四个方向遍历
        dfs(grid, i-1, j);
        dfs(grid, i+1, j);
        dfs(grid, i, j-1);
        dfs(grid, i, j+1);
    }
    // 判断坐标是否在网格中
    bool inArea(vector<vector<char>>& grid, int i, int j)
    {
        return (i >= 0) && (i < grid.size()) && (j >= 0) && (j < grid[0].size());
    }
};
```

